#!/usr/bin/env ruby

$: << "lib"
require 'dns-checker'

options = {
}

require 'optparse'
opts_parser = OptionParser.new do |opts|
  opts.banner = "Usage: dns-dependency-walker [options] ZONE"
  opts.on("--show-ipv6-errors", "Highlight zones that aren't accessible to IPv6-only clients") do |v|
    options[:show_ipv6] = true
  end
  opts.on("--show-nameservers", "Show nameservers") do |v|
    options[:show_nameservers] = true
  end
end

opts_parser.parse!

if ARGV.size != 1
  $stderr.puts opts_parser.help
  exit 1
end

zone = ARGV.first
zone = zone + "." unless zone.end_with? "."

cache = DNSChecker::ResolvCache.new(
  DNSChecker::ResolvCacheFetcher.new,
  DNSChecker::ResolvCacheStore.new("var/cache")
)

# servers = DNSChecker::RootServers::SERVER_IPV4
# DNSChecker::ZoneWalker.new(cache, servers).walk(zone)

full_resolver = DNSChecker::FullResolver::Resolver.new(
  DNSChecker::FullResolver::ZoneCache.new,
  DNSChecker::FullResolver::HostCache.new,
  cache
)

ans = full_resolver.find_answer(Resolv::DNS::Name.create(zone), Resolv::DNS::Resource::IN::A)
puts ""
puts ""
p ans
puts ""

STDOUT.reopen(File.open('zone.dot', 'w'))
DNSChecker::GraphMaker.new(full_resolver.zone_cache, full_resolver.host_cache, options).render_dot()
